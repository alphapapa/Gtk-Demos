#|
This file of "demostuff", used by the demo scripts, loads Gtk
and defines gapp, window, box, button, text, xtext, and xlabel.
  gapp      Establishes a Gtk app.  Its arguments are the app name
            and the code to be executed in the app.
  window    Establishes a window.  Its arguments are the name of
            the window object, the name of the app the window is
            used in, the window title, and the default width and
            height of the window.
  box       Establishes a box to place Gtk objects in.  Its three
            arguments are, first, h or v, for whether the contents
            of the box are to be organized horizontally or
            vertically, second, what box to establish, and third,
            what object the box is to be placed in.
  button    Establishes a button.  Its arguments are, what button
            to establish, the initial label text on the button,
            the object the button is to be placed in, and the code
            to be executed when the button is pressed.
  mbutton   Is like button, except the button label text will be
            left-aligned instead of centered.  It's for use in a
            column of buttons, such as a menu, where it might look
            neater to not center the button labels.
  text      Establishes a text display object, which Gtk calls a
            label.  Its arguments are the name of the text object,
            the initial text, and what object to place the text
            object in.
  xtext     Is a function to display some text in a text object.
            Its arguments are what text object to display the text
            in, and what text to display.
  xlabel    Is a function to update a button label.  Its arguments
            are the button and the new text.
|#

(load-shared-object "libgtk-3.so.0")

; Gtk relies on being able to divide by zero.  To prevent it from
; being an error, the following line changes the floating point
; errors to just overflow and invalid, and not division-by-zero.
; This isn't needed in most programming languages, because most
; of them default to having it not be an error.
(sb-int:set-floating-point-modes :traps '(:overflow :invalid))

; gfunc makes a prototype for a gtk function.
(defmacro gfunc (gtkname &rest types)
  `(define-alien-routine ,gtkname ,(car types)
     ,@(loop as argname in '(a b c d e f g h i j k l m)
             as argtype in (cdr types)
             collect (list argname argtype))))

; gfunc above vs x_x etc below: gfunc is more general, but more
; verbose.  x_x etc are for specific combinations of argument types.

; x_x, v_xs, etc use gfunc to make prototypes for gtk functions.
; The name, such as x_x, includes an underline, to indicate it's
; for a gtk function, because underlines are practically a
; trademark of gtk function names.  The letter before the underline
; is the return value type, and the other letters are the argument
; types:
; v for void
; x for void*
; s for c-string
; i for int
; In the following, the g argument is the name of the gtk function.
(defmacro x_x   (g) `(gfunc ,g (* t) (* t)))
(defmacro v_x   (g) `(gfunc ,g void (* t)))
(defmacro v_xx  (g) `(gfunc ,g void (* t) (* t)))
(defmacro x_i   (g) `(gfunc ,g (* t) int))
(defmacro v_xii (g) `(gfunc ,g void (* t) int int))
(defmacro v_xs  (g) `(gfunc ,g void (* t) c-string))
(defmacro x_s   (g) `(gfunc ,g (* t) c-string))
(defmacro s_x   (g) `(gfunc ,g c-string (* t)))
(defmacro i_xix (g) `(gfunc ,g int (* t) int (* t)))
(defmacro x_si  (g) `(gfunc ,g (* t) c-string int))
(defmacro v_xf  (g) `(gfunc ,g void (* t) float))

; These make the prototypes for the gtk functions.  See above.
(x_x   gtk_application_window_new)
(v_xs  gtk_window_set_title)
(v_xii gtk_window_set_default_size)
(x_i   gtk_button_box_new)
(x_i   gtk_size_group_new)
(x_x   gtk_bin_get_child)
(v_xf  gtk_label_set_xalign)
(v_xx  gtk_container_add)
(x_s   gtk_label_new)
(v_xs  gtk_label_set_text)
(v_xs  gtk_button_set_label)
(s_x   gtk_button_get_label)
(x_s   gtk_button_new_with_label)
(x_x   gtk_widget_destroy)
(x_si  gtk_application_new)
(i_xix g_application_run)
(v_x   g_object_unref)
(v_x   gtk_widget_show_all)
(gfunc g_signal_connect_data long
  (* t) c-string (function void (* t) (* t)) (* t) (* t) int)

; callbackname makes a callback name from an object name.
; The eval-when makes it usable during macro expansions.
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun callbackname (object)
    (intern (concatenate 'string (symbol-name object) "-CALLBACK"))))

; window establishes a Gtk window object.
; The arguments are, what window object to establish, what
; application the window is used in, the window title, and
; the width and height of the window.
(defmacro window (awin app title wid ht)
  (eval `(defparameter ,awin nil))
  `(progn
     (setf ,awin (gtk_application_window_new ,app))
     (gtk_window_set_title ,awin ,title)
     (gtk_window_set_default_size ,awin ,wid ,ht)))

; box establishes a box object.  The arguments are, whether the box
; contents are organized horizontally or vertically (h or v), what
; box is to be established, and what object to place the box in.
(defmacro box (hv abox placement)
  (eval `(defparameter ,abox nil))
  (let ((horizvert (case hv (h 0) (v 1) (t (error
         "The first argument to box should be h or v, not ~a" hv)))))
    `(progn
       (setf ,abox (gtk_button_box_new ,horizvert))
       (gtk_container_add ,placement ,abox))))

; button establishes a Gtk button object.  The arguments are,
; the name of the button object, the text shown on the button,
; what object to place the button in, and the action of the
; button, which can be any sequence of code.
(defmacro button (abutton buttonlabel placement &body body)
  (eval `(defparameter ,abutton nil))
  (let ((cb (callbackname abutton)))
    (eval `(sb-alien::define-alien-callback
             ,cb void ((a (* t)) (u (* t)))
             ,@body))
    `(progn
       (setf ,abutton (gtk_button_new_with_label ,buttonlabel))
       (g_signal_connect_data ,abutton "clicked" ,cb nil nil 0)
       (gtk_container_add ,placement ,abutton))))

; mbutton is like button, except that the button label text will be
; left aligned instead of centered, to make it neater in a column of
; buttons, such as for a menu.
(defmacro mbutton (abutton buttonlabel placement &body body)
  `(progn
     (button ,abutton ,buttonlabel ,placement ,@body)
     (let ((thelabel (gtk_bin_get_child ,abutton)))
       (gtk_label_set_xalign thelabel 0.0))))

; text establishes a Gtk "label" object which is actually a text
; display object.  The arguments are, what text object to
; establish, the initial text to display, and what object to
; place this text object in.
(defmacro text (atext text0 placement)
  (eval `(defparameter ,atext nil))
  `(progn
     (setf ,atext (gtk_label_new ,text0))
     (gtk_container_add ,placement ,atext)))

; xtext changes the text in a text object.
(defun xtext (textobject newtext)
  (gtk_label_set_text textobject newtext))

; xlabel changes the text label on a button.
(defun xlabel (button newtext)
  (gtk_button_set_label button newtext))

; gapp establishes a Gtk application.  The arguments are,
; the name of the application object, and the code to be
; executed by the application.
(defmacro gapp (theapp &body body)
  (eval `(defparameter ,theapp nil))
  (let ((cb (callbackname theapp)))
    (eval `(sb-alien::define-alien-callback
             ,cb void ((a (* t)) (u (* t)))
             ,@body))
    `(progn
       (setf ,theapp (gtk_application_new nil 0))
       (g_signal_connect_data ,theapp "activate" ,cb nil nil 0))))

; End of the demostuff file, which gets loaded by each demo script.
